export function joinPaths(...paths) {
    return paths.join("/");
}
export function filter(array, filterKey, value) {
    return array.filter((f) => (value ? f[filterKey] === value : f[filterKey]));
}
export function filterByMenu(array, keys, value) {
    const [childKey, filterKey] = keys;
    if (value && value.length) {
        const filterData = (data, predicate) => {
            return !!!data
                ? null
                : data.reduce((list, entry) => {
                    let clone = null;
                    if (predicate(entry)) {
                        // if the object matches the filter, clone it as it is
                        clone = Object.assign({}, entry);
                    }
                    else if (entry[childKey] != null) {
                        // if the object has childrens, filter the list of children
                        const children = filterData(entry[childKey], predicate);
                        if (children.length > 0) {
                            // if any of the children matches, clone the parent object, overwrite
                            // the children list with the filtered list
                            clone = Object.assign({}, entry, { children: [...children] });
                        }
                    }
                    // if there's a cloned object, push it to the output list
                    // tslint:disable-next-line: no-unused-expression
                    clone && list.push(clone);
                    return list;
                }, []);
        };
        return filterData(array, (item) => {
            return (item[filterKey] &&
                item[filterKey]
                    .toString()
                    .toLowerCase()
                    .includes(value.toString().toLowerCase()));
        });
    }
    return array;
}
export function parseValue(v) {
    // extract number (defaults to 0 if not present)
    const n = +(v.match(/\d+$/) || [0])[0];
    const str = v.replace(n.toString(), ""); // extract string part
    return [str, n];
}
export function sort(array, key, isCompare = false) {
    const compare = (x, y) => {
        if (isCompare && typeof x === "string" && typeof y === "string") {
            const a = parseValue(x);
            const b = parseValue(y);
            const result = a[0].localeCompare(b[0]);
            return result === 0 ? a[1] - b[1] : result;
        }
        else if (typeof x === "boolean" && typeof y === "boolean") {
            return x && !y ? -1 : x && y ? 0 : 1;
        }
        return x < y ? -1 : x > y ? 1 : 0;
    };
    return array.sort((a, b) => {
        const x = key
            ? typeof a[key] === "string"
                ? a[key].toLowerCase()
                : a[key]
            : a;
        const y = key
            ? typeof b[key] === "string"
                ? b[key].toLowerCase()
                : b[key]
            : b;
        return compare(x, y);
    });
}
export function multiSort(array, keys, isCompare = false) {
    const compare = (x, y) => {
        if (isCompare && typeof x === "string" && typeof y === "string") {
            const a = parseValue(x);
            const b = parseValue(y);
            const result = a[0].localeCompare(b[0]);
            return result === 0 ? a[1] - b[1] : result;
        }
        else if (typeof x === "boolean" && typeof y === "boolean") {
            return x === y ? 0 : x ? -1 : 1;
        }
        return x < y ? -1 : x > y ? 1 : 0;
    };
    let returnArray = array;
    keys.forEach((key) => {
        returnArray = returnArray.sort((a, b) => {
            const x = typeof a[key] === "string" ? a[key].toLowerCase() : a[key];
            const y = typeof b[key] === "string" ? b[key].toLowerCase() : b[key];
            return compare(x, y);
        });
    });
    return returnArray;
}
export function groupBy(array, keys) {
    const [parentKey, childKey, sortKey] = keys;
    let parentList = array.filter((f) => !f[parentKey]);
    const childList = filter(array, parentKey);
    parentList.forEach((parent) => {
        const items = filter(childList, parentKey, parent[childKey]);
        if (sortKey) {
            if (typeof sortKey === "string") {
                parent.items = sort(items, sortKey);
            }
            else {
                parent.items = multiSort(items, sortKey);
            }
        }
        else {
            parent.items = items;
        }
    });
    parentList = sortKey ? sort(parentList, sortKey) : parentList;
    return [...parentList];
}
export function between(value, min, max) {
    return value >= min && value <= max;
}
export function percentage(value, total) {
    return Math.round((value * 100) / total);
}
export function isJson(str) {
    try {
        JSON.parse(str);
    }
    catch (e) {
        return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,