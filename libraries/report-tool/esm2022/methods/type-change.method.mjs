import { ToWords } from "to-words";
import { sort } from "./common.method";
export function pageCaptions(captions) {
    const returnVal = captions.reduce((init, item) => {
        init[item.ControlName] = item.ControlCaption;
        return init;
    }, {});
    return returnVal;
}
export function xmlToJson(xml) {
    const xml2json = (srcDOM) => {
        const children = [];
        Object.keys(srcDOM.children).forEach((key) => {
            children.push(srcDOM.children[key]);
        });
        // base case for recursion.
        if (!children.length) {
            return srcDOM.innerHTML;
        }
        // initializing object to be returned.
        const jsonResult = {};
        children.forEach((child) => {
            // checking is child has siblings of same name.
            const childIsArray = children.filter((eachChild) => eachChild.nodeName === child.nodeName)
                .length > 1;
            // if child is array, save the values as array, else as strings.
            if (childIsArray) {
                if (jsonResult[child.nodeName] === undefined) {
                    jsonResult[child.nodeName] = [xml2json(child)];
                }
                else {
                    jsonResult[child.nodeName].push(xml2json(child));
                }
            }
            else {
                jsonResult[child.nodeName] = xml2json(child);
            }
        });
        return jsonResult;
    };
    const parser = new DOMParser();
    return xml2json(parser.parseFromString(xml, "application/xml"));
}
export function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? [
            parseInt(result[1], 16),
            parseInt(result[2], 16),
            parseInt(result[3], 16),
        ]
        : null;
}
export function rgbToHex(r, g, b) {
    function componentToHex(c) {
        const hex = c.toString(16);
        return hex.length === 1 ? "0" + hex : hex;
    }
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
export function loginNumberFormat(value, digits = -1, numberFormat = "") {
    value = value && value.toString().length ? value : "0";
    const [fDecimal, fFraction] = numberFormat.toString().split(".");
    const seperators = fDecimal.split(",").reverse();
    const [vDecimal, vFraction] = value.toString().split(".");
    const vDecimalRev = vDecimal.split("").reverse();
    const returnDecimal = seperators.reduce((init, current, idx) => {
        const start = init.replace(",", "").length;
        const end = start + current.length;
        const val = vDecimalRev.slice(start, end).reverse().join("");
        init = val + (val.length && init.length ? "," : "") + init;
        if (idx === seperators.length - 1) {
            const lastStart = init.replace(",", "").length;
            const lastEnd = vDecimalRev.length;
            const lastVal = vDecimalRev.slice(lastStart, lastEnd).reverse().join("");
            init = lastVal + (lastVal.length && init.length ? "," : "") + init;
        }
        return init;
    }, "");
    if (digits === -1) {
        digits = fFraction ? fFraction.length : 0;
    }
    const returnFraction = digits
        ? Number("." + (vFraction || 0))
            .toFixed(digits)
            .substr(1)
        : "";
    return returnDecimal + returnFraction;
}
export function changeMenuItem(array, keys, isSort = false) {
    let [labelKey, valueKey] = keys;
    valueKey = valueKey || labelKey;
    const returnValue = array.map((item) => ({
        label: item[labelKey],
        value: valueKey ? item[valueKey] : item,
        data: item,
    }));
    return isSort ? sort(returnValue, "label") : returnValue;
}
export function num2Word(num, locale) {
    const converterOptions = { currency: !!locale };
    const toWord = new ToWords({
        localeCode: locale || "en-US",
        converterOptions,
    });
    return toWord.convert(num);
}
//# sourceMappingURL=data:application/json;base64,