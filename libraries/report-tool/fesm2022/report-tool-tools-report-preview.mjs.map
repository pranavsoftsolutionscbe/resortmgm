{"version":3,"file":"report-tool-tools-report-preview.mjs","sources":["../../../projects/report-tool/tools/report-preview/report-preview.component.ts","../../../projects/report-tool/tools/report-preview/report-preview.component.html","../../../projects/report-tool/tools/report-preview/report-preview.module.ts","../../../projects/report-tool/tools/report-preview/public-api.ts","../../../projects/report-tool/tools/report-preview/report-tool-tools-report-preview.ts"],"sourcesContent":["import { Component, Input } from \"@angular/core\";\r\nimport { fillColor } from \"report-tool/core\";\r\n\r\n// const classNames = [\"table-row\", \"row-group\", \"row-childgroup\"];\r\n\r\n@Component({\r\n  selector: \"lib-report-preview\",\r\n  templateUrl: \"./report-preview.component.html\",\r\n  styleUrls: [\"./report-preview.component.css\"],\r\n})\r\nexport class ReportPreviewComponent {\r\n  @Input() public reportMetaData: any = {};\r\n  @Input() public devidHeight = 0;\r\n  @Input() public columns: any[] = [];\r\n  @Input() public reportData: any[] = [];\r\n  @Input() public reportMetaDataColumns: any;\r\n  @Input() public emptyMessage = \"\";\r\n  @Input() public fillColor = fillColor;\r\n  @Input() public isResponsive = true;\r\n\r\n  constructor() {\r\n    this.setDevidHeight();\r\n  }\r\n\r\n  public getColumnWidth(width: any): string {\r\n    return typeof width === \"string\" ? width : `${width}px`;\r\n  }\r\n\r\n  public getMetaDataRow(rowData: any, index: number, metaColumns: any): any {\r\n    return {\r\n      rowData,\r\n      index,\r\n      metaColumns,\r\n    };\r\n  }\r\n\r\n  public showMetaDataRow(\r\n    rowData: any,\r\n    index: number,\r\n    metaColumns: any\r\n  ): boolean {\r\n    if (metaColumns) {\r\n      const fields = (metaColumns.fields || []) as string[];\r\n      const metaData = fields.reduce((init, current) => {\r\n        if (init.columns) {\r\n          init = init.columns[rowData[current]] || {};\r\n        } else {\r\n          init = this.reportMetaData[rowData[current]] || {};\r\n        }\r\n        return init;\r\n      }, {} as any);\r\n      return metaData.index === index;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public showMetaDataSubTotalRow(\r\n    rowData: any,\r\n    index: number,\r\n    metaColumns: any\r\n  ): boolean {\r\n    if (metaColumns) {\r\n      const fields = (metaColumns.fields || []) as string[];\r\n      const metaData = fields.reduce((init, current, i) => {\r\n        if (init.columns) {\r\n          init = init.columns[rowData[current]] || {};\r\n        } else {\r\n          init = this.reportMetaData[rowData[current]] || {};\r\n        }\r\n        return init;\r\n      }, {} as any);\r\n      return (metaData.subTotal || {}).index === index;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public showMetaDataSubTotalCol(column: string, metaColumns: any): boolean {\r\n    const subFields = metaColumns ? metaColumns.subTotal || [] : [];\r\n    return subFields.includes(column);\r\n  }\r\n\r\n  public getMetadataSubTotal(\r\n    rowData: any,\r\n    column: string,\r\n    metaColumns: any\r\n  ): number {\r\n    if (this.showMetaDataSubTotalCol(column, metaColumns)) {\r\n      const fields = (metaColumns.fields || []) as string[];\r\n      const metaData = fields.reduce((init, current, i) => {\r\n        if (init.columns) {\r\n          init = init.columns[rowData[current]] || {};\r\n        } else {\r\n          init = this.reportMetaData[rowData[current]] || {};\r\n        }\r\n        return init;\r\n      }, {} as any);\r\n      return (metaData.subTotal || {})[column] || 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  public getTextColor(rowData: any, textColors: any): string {\r\n    if (textColors) {\r\n      const data = textColors.colors.find(\r\n        (f) => f.FieldID === rowData[textColors.field]\r\n      );\r\n      return data ? data.FieldDesc : \"\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  private setDevidHeight(count = 0): void {\r\n    const elem = document.getElementById(\"exportTable\");\r\n    if (elem && this.devidHeight) {\r\n      this.devidHeight = (elem as any).offsetTop;\r\n    } else if (count < 10) {\r\n      setTimeout(() => {\r\n        this.setDevidHeight(count + 1);\r\n      }, 1000);\r\n    }\r\n  }\r\n}\r\n","<div\r\n  class=\"{{ isResponsive ? 'table-responsive-sm table-responsive' : '' }}\"\r\n  style=\"width: 100%; overflow: auto\"\r\n  style.maxHeight=\"calc(100vh - {{ devidHeight + 8 }}px)\"\r\n>\r\n  <table\r\n    class=\"table table-bordered text-nowrap\"\r\n    id=\"exportTable\"\r\n    style=\"width: max-content\"\r\n  >\r\n    <thead>\r\n      <tr>\r\n        <th\r\n          *ngFor=\"let col of columns\"\r\n          [style.width]=\"getColumnWidth(col.width)\"\r\n          class=\"position-sticky\"\r\n        >\r\n          <b>{{ col.header }}</b>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let rowData of reportData; let index = index\">\r\n        <ng-container\r\n          [ngTemplateOutlet]=\"rowGroup\"\r\n          [ngTemplateOutletContext]=\"\r\n            getMetaDataRow(rowData, index, reportMetaDataColumns)\r\n          \"\r\n        ></ng-container>\r\n        <ng-container\r\n          [ngTemplateOutlet]=\"tableRow\"\r\n          [ngTemplateOutletContext]=\"\r\n            getMetaDataRow(rowData, index, reportMetaDataColumns)\r\n          \"\r\n        ></ng-container>\r\n        <ng-container\r\n          [ngTemplateOutlet]=\"subTotal\"\r\n          [ngTemplateOutletContext]=\"\r\n            getMetaDataRow(rowData, index, reportMetaDataColumns)\r\n          \"\r\n        ></ng-container>\r\n      </ng-container>\r\n    </tbody>\r\n    <tbody>\r\n      <tr class=\"table-row\" *ngIf=\"!reportData.length\">\r\n        <td colSpan=\"{{ columns.length }}\" class=\"text-center\">\r\n          {{ emptyMessage }}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<ng-template #tableRow let-rowData=\"rowData\" let-index=\"index\">\r\n  <tr class=\"table-row\">\r\n    <td\r\n      class=\"text-wrap\"\r\n      *ngFor=\"let col of columns\"\r\n      [class.text-right]=\"col.type == 'number' || col.type == 'id'\"\r\n      [class.text-center]=\"col.type == 'checked'\"\r\n      [style.color]=\"getTextColor(rowData, col.TextColors)\"\r\n      style.backgroundColor=\"#{{\r\n        (rowData.SNo || index + 1) % 2 ? fillColor.odd : fillColor.even\r\n      }}\"\r\n    >\r\n      <ng-container [ngSwitch]=\"col.type\">\r\n        <ng-container\r\n          *ngSwitchCase=\"'url'\"\r\n          [ngTemplateOutlet]=\"urlField\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"'checked'\"\r\n          [ngTemplateOutlet]=\"checkedField\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"'number'\"\r\n          [ngTemplateOutlet]=\"numberField\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchDefault\r\n          [ngTemplateOutlet]=\"defaultField\"\r\n        ></ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #urlField>\r\n        <a [href]=\"rowData[col.field]\" target=\"_blank\">\r\n          {{ rowData[col.field] }}\r\n        </a>\r\n      </ng-template>\r\n\r\n      <ng-template #checkedField>\r\n        <ng-container *ngIf=\"rowData[col.field]\">\r\n          <i class=\"fa fa-solid fa-check\"></i>\r\n        </ng-container>\r\n        <ng-container\r\n          *ngIf=\"!rowData[col.field]\"\r\n          style=\"font-weight: 1200; font-size: xx-large\"\r\n          >-</ng-container\r\n        >\r\n      </ng-template>\r\n\r\n      <ng-template #numberField>\r\n        <span [style.color]=\"rowData[col.field] ? '' : 'transparent'\">\r\n          {{ rowData[col.field] || 0 }}\r\n        </span>\r\n      </ng-template>\r\n\r\n      <ng-template #defaultField>{{ rowData[col.field] }}</ng-template>\r\n    </td>\r\n  </tr>\r\n</ng-template>\r\n\r\n<ng-template\r\n  #rowGroup\r\n  let-rowData=\"rowData\"\r\n  let-index=\"index\"\r\n  let-metaColumns=\"metaColumns\"\r\n>\r\n  <ng-container *ngIf=\"metaColumns && metaColumns.field\">\r\n    <tr\r\n      [class]=\"metaColumns.classNames\"\r\n      *ngIf=\"showMetaDataRow(rowData, index, metaColumns)\"\r\n    >\r\n      <td colSpan=\"{{ columns.length }}\" class=\"text-center\">\r\n        {{ metaColumns.header }}\r\n        {{ rowData[metaColumns.field] }}\r\n      </td>\r\n    </tr>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"rowGroup\"\r\n      [ngTemplateOutletContext]=\"\r\n        getMetaDataRow(rowData, index, metaColumns.columns)\r\n      \"\r\n    ></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template\r\n  #subTotal\r\n  let-rowData=\"rowData\"\r\n  let-index=\"index\"\r\n  let-metaColumns=\"metaColumns\"\r\n>\r\n  <ng-container *ngIf=\"metaColumns\">\r\n    <tr\r\n      [class]=\"metaColumns.classNames\"\r\n      *ngIf=\"showMetaDataSubTotalRow(rowData, index, metaColumns)\"\r\n    >\r\n      <td\r\n        class=\"text-right\"\r\n        *ngFor=\"let col of columns\"\r\n        style.backgroundColor=\"#{{ fillColor.groupTotal }}\"\r\n      >\r\n        <span\r\n          *ngIf=\"showMetaDataSubTotalCol(col.field, metaColumns)\"\r\n          [style.color]=\"\r\n            getMetadataSubTotal(rowData, col.field, metaColumns)\r\n              ? ''\r\n              : 'transparent'\r\n          \"\r\n        >\r\n          {{ getMetadataSubTotal(rowData, col.field, metaColumns) }}\r\n        </span>\r\n      </td>\r\n    </tr>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"subTotal\"\r\n      [ngTemplateOutletContext]=\"\r\n        getMetaDataRow(rowData, index, metaColumns.columns)\r\n      \"\r\n    ></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule, DatePipe } from \"@angular/common\";\r\n\r\nimport { ReportPreviewComponent } from \"./report-preview.component\";\r\n\r\n@NgModule({\r\n  declarations: [ReportPreviewComponent],\r\n  imports: [CommonModule],\r\n  exports: [ReportPreviewComponent],\r\n  providers: [DatePipe],\r\n})\r\nexport class ReportPreviewModule {}\r\n","/*\n * Public API Surface of report-tool\n */\nexport * from './report-preview.component';\nexport * from './report-preview.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}