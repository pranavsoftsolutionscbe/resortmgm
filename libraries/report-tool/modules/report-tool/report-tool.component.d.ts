import { EventEmitter, OnChanges, SimpleChanges } from "@angular/core";
import { Observable } from "rxjs";
import { ToastrService } from "ngx-toastr";
import { SelectItem } from "primeng/api";
import { IMenuItem, IMyReportDetails, IQueryField, IReportDetails, IReportHeads, IReportHeadsCUD, IReportHeadsDetail, IReportPortReq, IReportRow, ITreeNode, IUrlRequestParams } from "report-tool/models";
import { SampleReport } from "report-tool/core";
import * as i0 from "@angular/core";
export declare class ReportToolComponent implements OnChanges {
    private toastr;
    reportTreeNode: ITreeNode<number>[];
    reportList: IReportHeadsDetail[];
    reportHeads: IReportHeads;
    reportDetails: IMyReportDetails[];
    pdDateRange: SelectItem[];
    phDateFormat: string;
    validViewDisabled: IReportDetails;
    validOrderBy: IReportDetails;
    validGroupingEligible: IReportDetails;
    validGroupBy: IReportDetails;
    validSumField: IReportDetails;
    validRunningTotal: IReportDetails;
    validGroupTotal: IReportDetails;
    validGrandTotal: IReportDetails;
    validFilterField: IReportDetails;
    showList: boolean;
    currentTime: Date;
    reportPort: IReportPortReq;
    obsReportList: Observable<IReportHeadsDetail[]>;
    obsReportHeads: Observable<IReportHeads>;
    obsReportDetails: Observable<IMyReportDetails[]>;
    onSelectReport: EventEmitter<number>;
    onLedgerQuery: EventEmitter<string>;
    onComboQuery: EventEmitter<IQueryField>;
    onReportEvent: EventEmitter<IUrlRequestParams>;
    onSaveReport: EventEmitter<IReportHeadsCUD>;
    reportMetadataCols: any;
    sampleReport: typeof SampleReport;
    pdStyleSheets: IMenuItem<any>[];
    private numberFormat;
    constructor(toastr: ToastrService);
    ngOnChanges(changes: SimpleChanges): void;
    onChangeDateRange(): void;
    toggleOrderByField(field?: string): void;
    toggleOrderByPref(detail: IMyReportDetails): void;
    toggleGroupByField(isGroupBy?: boolean, fixedGroup?: boolean): void;
    toggleSumField(field: string, isAdd?: boolean): void;
    toggleFilterField(detail: IMyReportDetails): void;
    onSearchFilterList(query: string): void;
    addToFilterField(): void;
    onChangeStyleSheet(): void;
    doSave(): void;
    getReport(): void;
    private initialize;
    private getReportList;
    private getReportHeads;
    private getReportDetails;
    private setReportPort;
    private setTreeNode;
    private setLedgerQuery;
    private replaceQueryValues;
    private setSumFields;
    private isExistReportName;
    private isChange;
    get fillColor(): IReportRow;
    private get sqlQuery();
    private get dateRangeList();
    private get reportColumns();
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportToolComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ReportToolComponent, "lib-report-tool", never, { "showList": { "alias": "showList"; "required": false; }; "currentTime": { "alias": "currentTime"; "required": false; }; "reportPort": { "alias": "reportPort"; "required": false; }; "obsReportList": { "alias": "obsReportList"; "required": false; }; "obsReportHeads": { "alias": "obsReportHeads"; "required": false; }; "obsReportDetails": { "alias": "obsReportDetails"; "required": false; }; "reportMetadataCols": { "alias": "reportMetadataCols"; "required": false; }; "pdStyleSheets": { "alias": "pdStyleSheets"; "required": false; }; "numberFormat": { "alias": "numberFormat"; "required": false; }; }, { "onSelectReport": "onSelectReport"; "onLedgerQuery": "onLedgerQuery"; "onComboQuery": "onComboQuery"; "onReportEvent": "onReportEvent"; "onSaveReport": "onSaveReport"; }, never, never, false, never>;
}
